" opt into Vim 8’s new defaults
" see `:help defaults.vim`
unlet! skip_defaults_vim
if filereadable($VIMRUNTIME . '/defaults.vim')
  source $VIMRUNTIME/defaults.vim
endif

" The core fzf plugin needs to be enabled BEFORE the fzf.vim package is loaded
" (the conditional is just a kludge to test if we're on osx or a unix)
" TODO this can be replaced by a second invocation of Plug for fzf
" if isdirectory('/opt')
"   set rtp+=/opt/local/share/fzf/vim/
" else
"   set rtp+=/usr/local/share/fzf/vim
" endif
" PLUGINS: LOAD
" (vim-plug standard path: ~/.vim/autoload/plug.vim)
call plug#begin('~/.vim/plugged')
Plug 'airblade/vim-rooter'
" Plug 'autozimu/LanguageClient-neovim', {
"     \ 'branch': 'next',
"     \ 'do': 'bash install.sh',
"     \ }
" FIXME nixos 20.09 only: must lock fzf and fzf.vim to 0.22 since nix doesn't ship the
" newer version yet
Plug 'junegunn/fzf', { 'tag': '0.22.0' }
Plug 'junegunn/fzf.vim', { 'commit': '18205e071dc701ed9ca51971466b9997cd3d0778' }
Plug 'mbbill/undotree'
Plug 'mhinz/vim-grepper'
Plug 'reedes/vim-lexical'
Plug 'reedes/vim-wordy'
Plug 'tpope/tpope-vim-abolish'
Plug 'tpope/vim-apathy'
Plug 'tpope/vim-commentary'
Plug 'tpope/vim-dispatch'
Plug 'tpope/vim-endwise'
Plug 'tpope/vim-eunuch'
Plug 'tpope/vim-fugitive'
Plug 'tpope/vim-jdaddy'
Plug 'tpope/vim-projectionist'
Plug 'tpope/vim-repeat'
Plug 'tpope/vim-sleuth' 
Plug 'tpope/vim-surround'
Plug 'tpope/vim-unimpaired'
Plug 'tpope/vim-vinegar'
Plug 'vim-scripts/scratch.vim'
Plug 'vimwiki/vimwiki'
Plug 'dense-analysis/ale'
let g:ultisnips_install = 'mkdir -p ~/.vim/ftdetect/ && ln -s ./ftdetect/* ~/.vim/ftdetect/'
" Plug 'honza/vim-snippets' | Plug 'SirVer/ultisnips', { 'do': g:ultisnips_install }
Plug 'AndrewRadev/bufferize.vim'
" Plug 'lifepillar/vim-mucomplete'
" Plug 'shumphrey/fugitive-gitlab.vim'
Plug 'hashivim/vim-terraform'
Plug 'markonm/traces.vim'
Plug 'mattn/emmet-vim'
" Plug 'honza/vim-snippets' | Plug 'SirVer/ultisnips'
call plug#end()

" syntax highlighting, keep existing color settings
syntax enable 

" Nobody really needs modelines, especially with security issue
set modelines=0

" Don't fiddle with tabstop, just customize shiftwidth/softtabs
set shiftwidth=2
set softtabstop=2
set expandtab

" Sanity settings
set encoding=utf-8
set scrolloff=3
set autoindent
set showmode
set hidden
set wildmode=longest:full,full
set visualbell
set ttyfast
set backspace=indent,eol,start
set laststatus=2

" Disable cursor blinking
set gcr=a:blinkon0

" Don't show these filetypes in wildmenu
set wildignore=*.dll,*.o,*.pyc,*.bak,*.exe,*.jpg,*.jpeg,*.png,*.gif,*$py.class,*.class

" Use case-sensitive search if one-or-more uppercase chars
set ignorecase

" 'ignorecase' does not play nicely with completion
" (requires modern Vim!)
" FIXME seems to confuse Unite's completion in subbuffer, like <leader>e ?
"set infercase
"set smartcase

" Apply substitutions globally on lines (i.e., always assume /foo/bar/g)
set gdefault

" Highlite search results incrementally
set showmatch
set hlsearch

" Line wrapping
set wrap
" requires Vim 8+
set breakindent " indent wrapped lines, by...
set breakindentopt=shift:4,sbr " indenting them another level and showing 'showbreak' char
set listchars=tab:▸\ ,eol:¬
set showbreak=↪
" with breakindent+relativenumber, display line movements unless preceded by a count
" (and save movements larger than 5 lines to the jumplist)
nnoremap <expr> j v:count ? (v:count > 5 ? "m'" . v:count : '') . 'j' : 'gj'
nnoremap <expr> k v:count ? (v:count > 5 ? "m'" . v:count : '') . 'k' : 'gk'

" Allow 'gq', automatically insert comment leader in Insert, recognize list numbers
set formatoptions=qrn1
"set colorcolumn=100 " visual warning if longer than 100 chars in line

" optimization: only syntax highlight the first 200 characters of each line
set synmaxcol=200

" Show invisible characters(tab, EOL)
set list
set listchars=tab:▸\ ,eol:¬

" Don't warn about files changing out from under us
set autoread

" Default spelling is US English
set spelllang=en_us

" Key mappings
let mapleader = "\<Space>"

" Change default regex to use \v
nnoremap / /\v
vnoremap / /\v

" Clear out search results
nnoremap <leader>, :noh<cr>

" Make ; do the same thing as :
nnoremap ; :


if has('macunix')
  " Disable middle mouse to avoid pasting problems on OSX
  map <MiddleMouse> <Nop>
  imap <MiddleMouse> <Nop>
end

" TRIAL
" change all fancy characters to their ascii equivs(", ', etc.)
" from https://github.com/garybernhardt/dotfiles/blob/master/.vimrc#L615
function! RemoveFancyCharacters()
    let typo = {}
    let typo["“"] = '"'
    let typo["”"] = '"'
    let typo["‘"] = "'"
    let typo["’"] = "'"
    let typo["–"] = '--'
    let typo["—"] = '---'
    let typo["…"] = '...'
    :exe ":%s/".join(keys(typo), '\|').'/\=typo[submatch(0)]/ge'
endfunction
" (does not use /g since 'gdefault' is now always on)
" nnoremap <leader>Q :%s/\%u201c/"/e<cr>:%s/\%u201d/"/e<cr>:%s/\%u2019/'/e<cr>:%s/\%u2018/'/e<cr>:let @/=''<CR>
nnoremap <leader>Q :call RemoveFancyCharacters()<cr>

" strip all trailing whitespace in the current file
nnoremap <leader>W :%s/\s\+$//<cr>:let @/=''<CR>
" use jj to exit insert mode
inoremap jj <ESC>
" Window-splitting helpers
" Split vertically with <leader>w
nnoremap <leader>w <C-w>v<C-w>l
" Split horizontally with <leader>v
nnoremap <leader>v <C-w>s<C-w>k
" jump between splits with regular motions
nnoremap <C-h> <C-w>h
nnoremap <C-j> <C-w>j
nnoremap <C-k> <C-w>k
nnoremap <C-l> <C-w>l

" Allow '~' to be used as an operator
set tildeop

" Default augroup for autocmds defined in vimrc
augroup vimrc
  autocmd!
augroup end

" force detection of *.md to Markdown, not modula-2
autocmd vimrc BufNewFile,BufReadPost *.md set filetype=markdown

" fold tags with ,ft
"nnoremap <leader>ft Vatzf

" Reselect just-pasted text with ,v
"nnoremap <leader>v V`]


" Autosave on losing focus
autocmd vimrc FocusLost * :wa

" SWP files and friends
" Write undo/swap files to a vim-specific temp dir
set backupdir=$HOME/.vtemp//
set directory=~/.vtemp//,/tmp
set undodir=~/.vtemp//
set viminfo+=n~/.vtemp/viminfo
" Skip /tmp and /private since changing anything there needs edit-in-place
set backupskip=/tmp/*,/private/tmp/*
" Automatically recover+delete swap files if reopening after a crash
augroup vimrc AutomaticSwapRecoveryAndDelete
    autocmd SwapExists * :let v:swapchoice = 'r' | let b:swapname = v:swapname
    autocmd BufWinEnter * :if exists("b:swapname") | call delete(b:swapname) | unlet b:swapname | endif
augroup end

" automatically equalize splits on resize
autocmd vimrc VimResized * wincmd =


" kill buffer without closing split
"command Bd bp\|bd \#

" TRIAL
" from https://github.com/garybernhardt/dotfiles/blob/master/.vimrc
" THis is a slightly smarter tab-complete. It moves backwards in the menu to
" avoid trickery with sending C-N after a Tab
" COLLIDES with mucomplete
function! InsertTabWrapper()
    let col = col('.') - 1
    if !col
        return "\<tab>"
    endif

    let char = getline('.')[col - 1]
    if char =~ '\k'
        " There's an identifier before the cursor, so complete the identifier.
        return "\<c-p>"
    else
        return "\<tab>"
    endif
endfunction
inoremap <expr> <tab> InsertTabWrapper()
inoremap <s-tab> <c-n>


" FIXME because these are called from vimrc, they don't seem to work if moved
" to an autoload script
" http://vim.wikia.com/wiki/Toggle_to_open_or_close_the_quickfix_window
" TODO investigate cleaned-up functions at:
" https://github.com/garybernhardt/dotfiles/blob/master/.vimrc#L581
function! GetBufferList() abort
  redir =>buflist
  silent! ls!
  redir END
  return buflist
endfunction

function! ToggleList(bufname, pfx) abort
  let buflist = GetBufferList()
  for bufnum in map(filter(split(buflist, '\n'), 'v:val =~ "'.a:bufname.'"'), 'str2nr(matchstr(v:val, "\\d\\+"))')
    if bufwinnr(bufnum) != -1
      exec(a:pfx.'close')
      return
    endif
  endfor
  " FIXME this only stops the list from opening if it's the loclist, not
  " quickfix
  if a:pfx == 'l' && len(getloclist(0)) == 0
      echohl ErrorMsg
      echo "Location list is empty"
      return
  endif
  let winnr = winnr()
  exec(a:pfx.'open')
  if winnr() != winnr
    wincmd p
  endif
endfunction

nmap <silent> <leader>l :call ToggleList("Location List", 'l')<CR>
nmap <silent> <leader>q :call ToggleList("Quickfix List", 'c')<CR>



" TODO move+load developer.vim to/from plugin/

" courtesy of steve losh
nnoremap <leader>ev :vsplit $MYVIMRC<cr>
nnoremap <leader>sv :source $MYVIMRC<cr>

" Enable matchit plugin for better '%' usage
" (it is supplied with vim as of 8+: $VIMRUNTIME/pack/dist/opt/matchit)
packadd! matchit

" Ruby (and others?) don't play nice with the newer regex engine
" TODO it'd be nice to have this on a per-language or per-file basis,
" but I don't think you can!
"set regexpengine=1


" Make Y apply from cursor to end of line
nnoremap Y y$


nnoremap <leader>id :put =strftime('%Y%m%d')<cr>

" TRIAL easier specific completion without tab
" inoremap ^] ^X^]
inoremap <c-]> <c-x><c-]>
" inoremap ^F ^X^F
inoremap <c-f> <c-x><c-f>
" inoremap ^D ^X^D
inoremap <c-d> <c-x><c-d>
" inoremap ^L ^X^L
inoremap <c-l> <c-x><c-l>
" All other extra configs (and plugins) are in ~/.vim/plugin/config.vim

